"""
Simple test for indicators using synthetic data
Does not require data fetching - focuses only on indicators
"""
import pandas as pd
import numpy as np
import logging
import matplotlib.pyplot as plt
import os

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Resolving imports
import sys
sys.path.append('/home/dex/D3X7-ALGO')
sys.path.append('/home/dex/D3X7-ALGO/src')

def generate_synthetic_data(rows=500):
    """
    Generate synthetic OHLCV market data with:
      - A random walk
      - Some cyclical behavior
      - Volatility that changes over time
    """
    np.random.seed(42)
    dates = pd.date_range(start="2023-01-01", periods=rows, freq="1h")
    
    # Base random walk
    price = 100 + np.cumsum(np.random.randn(rows) * 2)

    # Add a sinusoidal drift
    cycle = 5 * np.sin(np.linspace(0, 4 * np.pi, rows))
    price += cycle

    # Add a trend
    trend = np.linspace(0, 30, rows)
    price += trend

    # Change volatility
    vol_cluster = np.ones(rows)
    for i in range(1, rows):
        if np.random.rand() < 0.05:  # 5% chance to change volatility
            vol_cluster[i] = np.random.uniform(0.5, 2.0)
        else:
            vol_cluster[i] = vol_cluster[i - 1]
            
    price += np.random.randn(rows) * vol_cluster * 2

    # Build high/low/close
    close = price + np.random.randn(rows) * 0.5
    high = np.maximum(price, close) + np.random.rand(rows) * 2
    low = np.minimum(price, close) - np.random.rand(rows) * 2

    # Random volume
    volume = np.random.randint(500, 3000, size=rows)

    return pd.DataFrame({
        "high": high,
        "low": low,
        "close": close,
        "open": price - np.random.randn(rows) * 0.5,
        "volume": volume
    }, index=dates)

def analyze_signals(df, signal_col, label):
    """
    Analyze the signals generated by an indicator.
    """
    signals = df[signal_col]
    
    # Count the number of buy, sell, and neutral signals
    buy_count = (signals == 1).sum()
    sell_count = (signals == -1).sum()
    neutral_count = (signals == 0).sum()
    
    # Calculate the percentage of each signal type
    total_signals = len(signals)
    buy_pct = buy_count / total_signals * 100
    sell_pct = sell_count / total_signals * 100
    neutral_pct = neutral_count / total_signals * 100
    
    # Print the results
    logger.info(f"\n==== {label} Signal Analysis ====")
    logger.info(f"Buy signals: {buy_count} ({buy_pct:.2f}%)")
    logger.info(f"Sell signals: {sell_count} ({sell_pct:.2f}%)")
    logger.info(f"Neutral signals: {neutral_count} ({neutral_pct:.2f}%)")
    
    # Print the first few and last few signals
    logger.info("\nFirst 5 signals:")
    logger.info(signals.head(5))
    logger.info("\nLast 5 signals:")
    logger.info(signals.tail(5))
    
    return {
        'buy_count': buy_count,
        'sell_count': sell_count,
        'neutral_count': neutral_count,
        'buy_pct': buy_pct,
        'sell_pct': sell_pct,
        'neutral_pct': neutral_pct
    }

def plot_signals(df, signal_columns, save_path=None):
    """
    Plot the price chart with buy/sell signals from multiple indicators
    """
    plt.figure(figsize=(12, 8))
    
    # Plot price
    plt.plot(df.index, df["close"], label="Close Price", color="black", alpha=0.7)
    
    # Colors for each indicator
    colors = ['green', 'red', 'blue', 'purple', 'orange', 'brown', 'pink']
    
    # Plot signals for each indicator
    for i, (col_name, col_label) in enumerate(signal_columns):
        color = colors[i % len(colors)]
        
        # Buy signals
        buys = df[df[col_name] == 1]
        plt.scatter(buys.index, buys["close"], marker="^", color=color, s=100, label=f"{col_label} Buy")
        
        # Sell signals
        sells = df[df[col_name] == -1]
        plt.scatter(sells.index, sells["close"], marker="v", color=color, s=100, label=f"{col_label} Sell", alpha=0.7)
    
    plt.title("Indicator Signals on Synthetic Data")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    if save_path:
        plt.savefig(save_path, dpi=300)
        logger.info(f"Plot saved to {save_path}")
    
    plt.tight_layout()
    plt.show()

def main():
    """Main function to test indicators"""
    logger.info("Starting indicator tests with synthetic data")
    
    # Create synthetic data
    df = generate_synthetic_data(rows=500)
    logger.info(f"Generated synthetic data with {len(df)} rows")
    logger.info(f"Data range: {df.index.min()} to {df.index.max()}")
    
    # Print data sample
    logger.info("\nData Sample:")
    logger.info(df.head())
    
    # Try to import indicators
    try:
        logger.info("\nImporting indicators...")
        
        from utils.indicators.wrapper_rsi import RsiIndicator
        logger.info("✅ RSI indicator imported")
        
        from utils.indicators.wrapper_macd import MacdIndicator
        logger.info("✅ MACD indicator imported")
        
        from utils.indicators.wrapper_supertrend import SupertrendIndicator
        logger.info("✅ Supertrend indicator imported")
        
        from utils.indicators.wrapper_bollinger_bands import BollingerBandsIndicator
        logger.info("✅ Bollinger Bands indicator imported")
        
        try:
            from utils.indicators.wrapper_lorentzian import LorentzianIndicator
            logger.info("✅ Lorentzian indicator imported")
            has_lorentzian = True
        except ImportError as e:
            logger.warning(f"⚠️ Lorentzian indicator not available: {e}")
            has_lorentzian = False
            
        # Test RSI
        logger.info("\nTesting RSI indicator...")
        rsi = RsiIndicator()
        df["RSI_Signal"] = rsi.generate_signals(df)
        analyze_signals(df, "RSI_Signal", "RSI")
        
        # Test MACD
        logger.info("\nTesting MACD indicator...")
        macd = MacdIndicator()
        df["MACD_Signal"] = macd.generate_signals(df)
        analyze_signals(df, "MACD_Signal", "MACD")
        
        # Test SuperTrend
        logger.info("\nTesting SuperTrend indicator...")
        supertrend = SupertrendIndicator()
        df["SuperTrend_Signal"] = supertrend.generate_signals(df)
        analyze_signals(df, "SuperTrend_Signal", "SuperTrend")
        
        # Test Bollinger Bands
        logger.info("\nTesting Bollinger Bands indicator...")
        bb = BollingerBandsIndicator()
        df["BB_Signal"] = bb.generate_signals(df)
        analyze_signals(df, "BB_Signal", "Bollinger Bands")
        
        # Test Lorentzian if available
        if has_lorentzian:
            logger.info("\nTesting Lorentzian indicator...")
            lorentzian = LorentzianIndicator()
            df["Lorentzian_Signal"] = lorentzian.generate_signals(df)
            analyze_signals(df, "Lorentzian_Signal", "Lorentzian")
        
        # Create reports directory if it doesn't exist
        os.makedirs("reports", exist_ok=True)
        
        # Plot signals
        signal_columns = [
            ("RSI_Signal", "RSI"),
            ("MACD_Signal", "MACD"),
            ("SuperTrend_Signal", "SuperTrend"),
            ("BB_Signal", "Bollinger")
        ]
        
        if has_lorentzian:
            signal_columns.append(("Lorentzian_Signal", "Lorentzian"))
        
        plot_signals(df, signal_columns, save_path="reports/indicator_signals.png")
        
        logger.info("\n✅ All indicator tests completed successfully!")
        
    except ImportError as e:
        logger.error(f"❌ Error importing indicators: {e}")
    except Exception as e:
        logger.error(f"❌ Error testing indicators: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()