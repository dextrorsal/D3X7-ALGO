# Crypto Data Fetcher

A high-performance framework for cryptocurrency data collection, analysis, and strategy backtesting across multiple exchanges.

## 🌟 Features

- Multi-exchange support (Binance, Coinbase, Drift, Bitget)
- Historical and real-time data collection
- Advanced technical indicators and strategy backtesting
- Standardized data models across exchanges
- Comprehensive risk analysis tools

## 📁 Project Structure

```
crypto_data_fetcher/
├── src/
│   ├── exchanges/          # Exchange-specific implementations
│   │   └── base.py         # Base exchange handler interface
│   ├── storage/            # Data storage implementations
│   │   ├── raw.py          # Raw data storage
│   │   ├── live.py         # Live data storage
│   │   ├── tfrecord.py     # TFRecord utilities
│   │   └── tfrecord_storage.py # TFRecord storage implementation
│   ├── core/               # Core functionality and configurations
│   │   ├── config.py       # Configuration management
│   │   ├── models.py       # Data models
│   │   ├── exceptions.py   # Custom exceptions
│   │   └── symbol_mapper.py # Symbol mapping between exchanges
│   ├── utils/              # Helper functions and utilities
│   │   ├── improved_cli.py # Enhanced CLI interface
│   │   ├── indicators/     # Technical indicators
│   │   │   └── base_indicator.py # Base indicator class
│   │   └── strategy/       # Strategy implementations
│   │       └── base.py     # Base strategy class
│   └── backtesting/        # Backtesting framework
│       ├── backtester.py   # Core backtesting engine
│       ├── optimizer.py    # Strategy parameter optimization
│       └── risk_analysis.py # Monte Carlo simulation and risk analysis
├── tests/                  # Test suite
├── scripts/                # Utility scripts
├── config/                 # Configuration files
│   └── indicator_settings.json # Indicator configuration
├── data/                   # Data files
│   ├── historical/         # Historical data
│   │   ├── raw/            # Raw historical data
│   │   │   └── binance/    # Binance exchange data
│   │   │       ├── BTCUSDT/ # Bitcoin/USDT pair
│   │   │       │   ├── 1/  # 1-minute timeframe
│   │   │       │   ├── 5/  # 5-minute timeframe
│   │   │       │   └── 15/ # 15-minute timeframe
│   │   │       └── SOLUSDT/ # Solana/USDT pair
│   │   └── processed/      # Processed historical data
│   └── live/               # Live data
│       ├── raw/            # Raw live data
│       └── processed/      # Processed live data
├── logs/                   # Log files
├── fetch.py                # Main entry point script
├── requirements.txt        # Dependencies
├── README.md               # Project documentation
└── .gitignore              # Git ignore file
```

### Key Components

- **exchanges/** - Exchange handlers with standardized interfaces
  - `base.py` - Base exchange handler interface
  - `binance.py`, `coinbase.py`, `drift.py`, `bitget.py` - Exchange-specific implementations

- **storage/** - Data storage implementations
  - Raw data storage
  - Processed OHLCV data
  - Real-time data handling
  - TFRecord support

- **core/** - Core functionality
  - Configuration management
  - Error handling
  - Rate limiting

## 🚀 Quick Start

### Prerequisites

```bash
# Python 3.11+ required
python --version

# Create and activate virtual environment
python -m venv venv
source venv/bin/activate  # Unix
venv\Scripts\activate     # Windows

# Install dependencies
pip install -r requirements.txt
```

### Basic Usage

1. **Fetch Historical Data**
```bash
python fetch.py historical \
    --exchange binance \
    --markets BTC-USDT,ETH-USDT \
    --resolution 1h \
    --days 30
```

2. **Live Data Streaming**
```bash
python fetch.py live \
    --exchange coinbase \
    --markets BTC-USD,ETH-USD \
    --resolution 1m \
    --interval 60
```

3. **Run Backtesting**
```bash
python backtest.py \
    --strategy supertrend \
    --market BTC-USDT \
    --timeframe 1D \
    --capital 10000 \
    --start-date 2023-01-01
```

### CLI Reference

#### Historical Data Fetching
```bash
python fetch.py historical [OPTIONS]

Options:
  --exchange TEXT     Exchange name (binance/coinbase/drift/bitget)
  --markets TEXT     Comma-separated market pairs
  --resolution TEXT  Timeframe (1m/5m/15m/1h/4h/1D)
  --days INTEGER    Number of days to fetch
  --start-date TEXT Optional start date (YYYY-MM-DD)
  --end-date TEXT   Optional end date (YYYY-MM-DD)
```

#### Live Data Streaming
```bash
python fetch.py live [OPTIONS]

Options:
  --exchange TEXT     Exchange name
  --markets TEXT     Comma-separated market pairs
  --resolution TEXT  Timeframe
  --interval INTEGER Fetch interval in seconds
```

## 📊 Data Storage

Data is stored in a structured format:
```
data/
├── raw/
│   ├── binance/
│   ├── coinbase/
│   └── drift/
└── processed/
    ├── ohlcv/
    └── indicators/
```

## 🔧 Configuration

Create a `config.yaml` in the project root:

```yaml
exchanges:
  binance:
    api_key: "your_api_key"
    api_secret: "your_api_secret"
  coinbase:
    api_key: "your_api_key"
    api_secret: "your_api_secret"

storage:
  base_path: "data/"
  compression: true

logging:
  level: "INFO"
  file: "crypto_fetcher.log"
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🔗 Links

- [Documentation](docs/README.md)
- [Issue Tracker](https://github.com/yourusername/crypto-data-fetcher/issues)
- [Change Log](CHANGELOG.md)